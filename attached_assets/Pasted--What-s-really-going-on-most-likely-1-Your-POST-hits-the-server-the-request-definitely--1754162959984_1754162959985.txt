### What’s really going on (most likely)

1. **Your POST hits the server** – the request definitely reaches Express (it returns the custom “ownerId is required” error you wrote).
2. **`req.user` is still there**, but **something mutates or shadows the `id` property** *before* you try to read it in the `/api/quotes` handler.
3. The most common culprits are:

   * **Object spread/merge** in custom middleware that merges `req.body` onto `req.user` (blank `id` in the form wipes the real value).
   * **A serializer that stringifies → parses** `req.user`, dropping non-enumerable keys like `id` if it’s defined by `Object.defineProperty`.
   * **Route-specific middleware order**: `passport.authenticate('session')` isn’t being called on that route, so `req.user` is the cached object from a previous GET kept in memory, not the freshly deserialized one (it’s missing the DB-populated `.id`).

Because your console logs **inside** the route never appear, you’re almost certainly short-circuiting in a **global validation middleware** *before* your own handler executes.

---

## Five-minute proof-of-failure

Add a one-line tap **above every global middleware**:

```js
app.use((req, _res, next) => {
  if (req.path.startsWith('/api/quotes')) {
    console.log('🧭 reached', req.method, req.path, 'user:', req.user);
  }
  next();
});
```

*Expected output on POST:*

```
🧭 reached POST /api/quotes user: { id: null, email: 'joe@seed.com', ... }
```

If that prints **before** your route logs, the mutation is happening in a middleware you registered *earlier* than the quote router. That’s where to dig.

---

## Where to look first

| Suspect                                                  | Quick test                                                                 | Fix                                                                        |
| -------------------------------------------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------- |
| **Body-parser merging**                                  | Temporarily log `req.body` – does it contain `id: null`?                   | Never merge `req.body` onto `req.user`. Clone instead (`{ ...req.user }`). |
| **Custom validation layer** (e.g., Zod / Joi)            | Comment it out; POST again – if user.id survives you’ve found the culprit. | Validate a *copy* of the payload, not `req.user`.                          |
| **Missing `passport.authenticate('session')` on router** | Add it as the first middleware in `/api/quotes` router; POST again.        | Keeps each request’s `req.user` freshly deserialized.                      |
| **CSRF middleware re-serializing**                       | Temporarily disable CSRF; see if id survives.                              | Upgrade to the latest `csurf` (old versions stringify objects).            |

---

## Hardening fixes once you identify the line of death

1. **Freeze `req.user` early** –

   ```js
   app.use(passport.authenticate('session'));
   app.use((req, _res, next) => {
     Object.freeze(req.user);          // any accidental mutation will throw
     next();
   });
   ```
2. **Route guard** – at the start of the quote controller:

   ```js
   if (!req.user?.id) return res.status(401).json({ error: 'Session missing user ID' });
   ```
3. **Centralise user lookup** – instead of trusting the deserialized session object, fetch the user record by `req.user.id` right in the quote service; if that id is falsy, fail fast.

---

### Bottom line

It’s *not* Redis, Passport, or Google OAuth—they’re fine on GET. A piece of middleware between `passport.authenticate` and your quote handler is clobbering `user.id` or preventing the route from running.

1. Drop the tiny tap-middleware above.
2. Trace which layer runs just before the `ownerId is required` error is thrown.
3. Remove/patch that layer so it stops mutating `req.user` (or ensure every request re-authenticates with Passport on that route).

Once `req.user.id` survives intact, the quote save → DB → HubSpot flow will work again.
